an implementation of a rabbitmq server
used to keep a distributed queue of positive cases to be contact traced
also keeps contacts to be traced

the queue will be as resilient to failure as possible
in the event of a failure, there should be some recovery protocol

this collection of code does not necessarily have to be run on the same server
as the website, but it must be run and configured correctly to allow django to
function as required

the idea at the moment is to use an RPC like pattern (as detailed at 
https://en.wikipedia.org/wiki/Remote_procedure_call - the idea is that 
computation is performed in a different address space) but with the contact
tracers and their 'tracing' forming the remote computation.

for now, we are doing a simple implementation where creation of a user adds it
to the queue, and tracing retrieves them

this will need to be augmented with:
returning contacts to the queue if they haven't been confirmed in a period of
time/aren't able to be reached
publisher confirms (to ensure that all contacts are written successfully)
some mechanism for synchronising different database instances so that
statistics can be run correctly on any given web server


---

TODO
When adding users to the system, PUSH them to an exchange that will allow all
copies of the webserver to write them to local storage

When a case is POSITIVE, PUSH them to a central queue of some kind - this queue
must act as a singleton under concurrent access

Same must apply to contacts

Updates and deletions to database entries must be dealt with in the same way as
adding users to the system

